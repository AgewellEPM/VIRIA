import os
import json
from datetime import datetime, timedelta

GUARD_STATE_FILE = "vulnerability_state.json"
GUARD_LOG_FILE = "guard_log.json"
PROTECTED_FILES = ["main.py", "loopmemory.json", "ritual_loader.py"]
UNLOCK_PHRASES = ["unlock sacred memory", "ritual override granted"]
UNLOCK_DURATION_MINUTES = 10

class VulnerabilityGuard:
    def __init__(self):
        self.state = self._load_state()

    def _load_state(self):
        if os.path.exists(GUARD_STATE_FILE):
            with open(GUARD_STATE_FILE, "r") as f:
                return json.load(f)
        return {"unlocked_until": None}

    def _save_state(self):
        with open(GUARD_STATE_FILE, "w") as f:
            json.dump(self.state, f, indent=2)

    def is_unlocked(self):
        until = self.state.get("unlocked_until")
        if not until:
            return False
        return datetime.now() < datetime.fromisoformat(until)

    def attempt_unlock(self, phrase, source="unknown"):
        if phrase.strip().lower() in [p.lower() for p in UNLOCK_PHRASES]:
            expire = datetime.now() + timedelta(minutes=UNLOCK_DURATION_MINUTES)
            self.state["unlocked_until"] = expire.isoformat()
            self._save_state()
            self._log(f"UNLOCK GRANTED via '{phrase}' from {source}")
            print(f"[ðŸ”“] System unlocked until {expire.strftime('%H:%M:%S')}")
            return True
        else:
            self._log(f"UNLOCK DENIED from {source} using '{phrase}'")
            print("[ðŸ›‘] Unlock phrase invalid.")
            return False

    def is_protected(self, filename):
        return filename in PROTECTED_FILES and not self.is_unlocked()

    def _log(self, msg):
        log_entry = {
            "time": datetime.now().isoformat(),
            "event": msg
        }
        if os.path.exists(GUARD_LOG_FILE):
            with open(GUARD_LOG_FILE, "r") as f:
                log = json.load(f)
        else:
            log = []
        log.append(log_entry)
        with open(GUARD_LOG_FILE, "w") as f:
            json.dump(log[-100:], f, indent=2)

# --- Optional direct test ---
if __name__ == "__main__":
    guard = VulnerabilityGuard()

    while True:
        print("\n[ðŸ§¿ Vulnerability Guard Interface]")
        print("1. Check if unlocked")
        print("2. Attempt unlock with phrase")
        print("3. Check if file is protected")
        print("0. Exit")

        choice = input("> ").strip()
        if choice == "1":
            print("Unlocked:", guard.is_unlocked())
        elif choice == "2":
            phrase = input("Enter unlock phrase: ")
            guard.attempt_unlock(phrase, source="manual_test")
        elif choice == "3":
            filename = input("Filename to test: ")
            if guard.is_protected(filename):
                print(f"ðŸ›‘ File '{filename}' is protected.")
            else:
                print(f"âœ… File '{filename}' is currently modifiable.")
        elif choice == "0":
            break
